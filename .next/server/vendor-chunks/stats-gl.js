"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stats-gl";
exports.ids = ["vendor-chunks/stats-gl"];
exports.modules = {

/***/ "(ssr)/./node_modules/stats-gl/dist/main.cjs":
/*!*********************************************!*\
  !*** ./node_modules/stats-gl/dist/main.cjs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst panel = __webpack_require__(/*! ./panel.cjs */ \"(ssr)/./node_modules/stats-gl/dist/panel.cjs\");\nconst _Stats = class _Stats2 {\n  constructor({\n    trackGPU = false,\n    logsPerSecond = 30,\n    samplesLog = 60,\n    samplesGraph = 10,\n    precision = 2,\n    minimal = false,\n    horizontal = true,\n    mode = 0\n  } = {}) {\n    this.gl = null;\n    this.ext = null;\n    this.activeQuery = null;\n    this.gpuQueries = [];\n    this.threeRendererPatched = false;\n    this.frames = 0;\n    this.renderCount = 0;\n    this.isRunningCPUProfiling = false;\n    this.totalCpuDuration = 0;\n    this.totalGpuDuration = 0;\n    this.totalGpuDurationCompute = 0;\n    this.totalFps = 0;\n    this.gpuPanel = null;\n    this.gpuPanelCompute = null;\n    this.averageFps = { logs: [], graph: [] };\n    this.averageCpu = { logs: [], graph: [] };\n    this.averageGpu = { logs: [], graph: [] };\n    this.averageGpuCompute = { logs: [], graph: [] };\n    this.handleClick = (event) => {\n      event.preventDefault();\n      this.showPanel(++this.mode % this.dom.children.length);\n    };\n    this.handleResize = () => {\n      this.resizePanel(this.fpsPanel, 0);\n      this.resizePanel(this.msPanel, 1);\n      if (this.gpuPanel)\n        this.resizePanel(this.gpuPanel, 2);\n      if (this.gpuPanelCompute)\n        this.resizePanel(this.gpuPanelCompute, 3);\n    };\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.minimal = minimal;\n    this.trackGPU = trackGPU;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    this.dom = document.createElement(\"div\");\n    this.initializeDOM();\n    this.beginTime = performance.now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.fpsPanel = this.addPanel(new _Stats2.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats2.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.setupEventListeners();\n  }\n  initializeDOM() {\n    this.dom.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      opacity: 0.9;\n      z-index: 10000;\n      ${this.minimal ? \"cursor: pointer;\" : \"\"}\n    `;\n  }\n  setupEventListeners() {\n    if (this.minimal) {\n      this.dom.addEventListener(\"click\", this.handleClick);\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", this.handleResize);\n    }\n  }\n  async init(canvasOrGL) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n    if (this.handleThreeRenderer(canvasOrGL))\n      return;\n    if (await this.handleWebGPURenderer(canvasOrGL))\n      return;\n    if (!this.initializeWebGL(canvasOrGL))\n      return;\n  }\n  handleThreeRenderer(renderer) {\n    if (renderer.isWebGLRenderer && !this.threeRendererPatched) {\n      this.patchThreeRenderer(renderer);\n      this.gl = renderer.getContext();\n      if (this.trackGPU) {\n        this.initializeGPUTracking();\n      }\n      return true;\n    }\n    return false;\n  }\n  async handleWebGPURenderer(renderer) {\n    if (renderer.isWebGPURenderer) {\n      if (this.trackGPU) {\n        renderer.backend.trackTimestamp = true;\n        if (await renderer.hasFeatureAsync(\"timestamp-query\")) {\n          this.initializeWebGPUPanels();\n        }\n      }\n      this.info = renderer.info;\n      return true;\n    }\n    return false;\n  }\n  initializeWebGPUPanels() {\n    this.gpuPanel = this.addPanel(new _Stats2.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    this.gpuPanelCompute = this.addPanel(\n      new _Stats2.Panel(\"CPT\", \"#e1e1e1\", \"#212121\"),\n      3\n    );\n  }\n  initializeWebGL(canvasOrGL) {\n    if (canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    } else if (canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext(\"webgl2\");\n      if (!this.gl) {\n        console.error(\"Stats: Unable to obtain WebGL2 context.\");\n        return false;\n      }\n    } else {\n      console.error(\n        \"Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.\"\n      );\n      return false;\n    }\n    return true;\n  }\n  initializeGPUTracking() {\n    if (this.gl) {\n      this.ext = this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n      if (this.ext) {\n        this.gpuPanel = this.addPanel(new _Stats2.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n      }\n    }\n  }\n  begin() {\n    if (!this.isRunningCPUProfiling) {\n      this.beginProfiling(\"cpu-started\");\n    }\n    if (!this.gl || !this.ext)\n      return;\n    if (this.activeQuery) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n    }\n    this.activeQuery = this.gl.createQuery();\n    if (this.activeQuery) {\n      this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\n    }\n  }\n  end() {\n    this.renderCount++;\n    if (this.gl && this.ext && this.activeQuery) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      this.gpuQueries.push({ query: this.activeQuery });\n      this.activeQuery = null;\n    }\n  }\n  update() {\n    if (!this.info) {\n      this.processGpuQueries();\n    } else {\n      this.processWebGPUTimestamps();\n    }\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\");\n    this.updateAverages();\n    this.resetCounters();\n  }\n  processWebGPUTimestamps() {\n    this.totalGpuDuration = this.info.render.timestamp;\n    this.totalGpuDurationCompute = this.info.compute.timestamp;\n    this.addToAverage(this.totalGpuDurationCompute, this.averageGpuCompute);\n  }\n  updateAverages() {\n    this.addToAverage(this.totalCpuDuration, this.averageCpu);\n    this.addToAverage(this.totalGpuDuration, this.averageGpu);\n  }\n  resetCounters() {\n    this.renderCount = 0;\n    if (this.totalCpuDuration === 0) {\n      this.beginProfiling(\"cpu-started\");\n    }\n    this.totalCpuDuration = 0;\n    this.totalFps = 0;\n    this.beginTime = this.endInternal();\n  }\n  resizePanel(panel2, offset) {\n    panel2.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel2.canvas.style.display = \"none\";\n    } else {\n      panel2.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel2.canvas.style.top = \"0px\";\n        panel2.canvas.style.left = offset * panel2.WIDTH / panel2.PR + \"px\";\n      } else {\n        panel2.canvas.style.left = \"0px\";\n        panel2.canvas.style.top = offset * panel2.HEIGHT / panel2.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel2, offset) {\n    if (panel2.canvas) {\n      this.dom.appendChild(panel2.canvas);\n      this.resizePanel(panel2, offset);\n    }\n    return panel2;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.dom.children.length; i++) {\n      const child = this.dom.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  processGpuQueries() {\n    if (!this.gl || !this.ext)\n      return;\n    this.totalGpuDuration = 0;\n    this.gpuQueries.forEach((queryInfo, index) => {\n      if (this.gl) {\n        const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\n        const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n        if (available && !disjoint) {\n          const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\n          const duration = elapsed * 1e-6;\n          this.totalGpuDuration += duration;\n          this.gl.deleteQuery(queryInfo.query);\n          this.gpuQueries.splice(index, 1);\n        }\n      }\n    });\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    const elapsed = time - this.prevTime;\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      const fps = Math.round(this.frames * 1e3 / elapsed);\n      this.addToAverage(fps, this.averageFps);\n      this.updatePanel(this.fpsPanel, this.averageFps, 0);\n      this.updatePanel(this.msPanel, this.averageCpu, this.precision);\n      this.updatePanel(this.gpuPanel, this.averageGpu, this.precision);\n      if (this.gpuPanelCompute) {\n        this.updatePanel(this.gpuPanelCompute, this.averageGpuCompute);\n      }\n      this.frames = 0;\n      this.prevCpuTime = time;\n      this.prevTime = time;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n      this.isRunningCPUProfiling = true;\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName) {\n    if (window.performance && endMarker && this.isRunningCPUProfiling) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.totalCpuDuration += cpuMeasure.duration;\n      this.isRunningCPUProfiling = false;\n    }\n  }\n  updatePanel(panel2, averageArray, precision = 2) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel2) {\n        panel2.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, precision);\n      }\n    }\n  }\n  get domElement() {\n    return this.dom;\n  }\n  patchThreeRenderer(renderer) {\n    const originalRenderMethod = renderer.render;\n    const statsInstance = this;\n    renderer.render = function(scene, camera) {\n      statsInstance.begin();\n      originalRenderMethod.call(this, scene, camera);\n      statsInstance.end();\n    };\n    this.threeRendererPatched = true;\n  }\n};\n_Stats.Panel = panel.Panel;\nlet Stats = _Stats;\nmodule.exports = Stats;\n//# sourceMappingURL=main.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stats-gl/dist/main.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/stats-gl/dist/panel.cjs":
/*!**********************************************!*\
  !*** ./node_modules/stats-gl/dist/panel.cjs ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nclass Panel {\n  constructor(name, fg, bg) {\n    this.name = name;\n    this.fg = fg;\n    this.bg = bg;\n    this.gradient = null;\n    this.PR = Math.round(window.devicePixelRatio || 1);\n    this.WIDTH = 90 * this.PR;\n    this.HEIGHT = 48 * this.PR;\n    this.TEXT_X = 3 * this.PR;\n    this.TEXT_Y = 2 * this.PR;\n    this.GRAPH_X = 3 * this.PR;\n    this.GRAPH_Y = 15 * this.PR;\n    this.GRAPH_WIDTH = 84 * this.PR;\n    this.GRAPH_HEIGHT = 30 * this.PR;\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = this.WIDTH;\n    this.canvas.height = this.HEIGHT;\n    this.canvas.style.width = \"90px\";\n    this.canvas.style.height = \"48px\";\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.cssText = \"width:90px;height:48px\";\n    this.context = this.canvas.getContext(\"2d\");\n    this.initializeCanvas();\n  }\n  createGradient() {\n    if (!this.context)\n      throw new Error(\"No context\");\n    const gradient = this.context.createLinearGradient(\n      0,\n      this.GRAPH_Y,\n      0,\n      this.GRAPH_Y + this.GRAPH_HEIGHT\n    );\n    let startColor;\n    const endColor = this.fg;\n    switch (this.fg.toLowerCase()) {\n      case \"#0ff\":\n        startColor = \"#006666\";\n        break;\n      case \"#0f0\":\n        startColor = \"#006600\";\n        break;\n      case \"#ff0\":\n        startColor = \"#666600\";\n        break;\n      case \"#e1e1e1\":\n        startColor = \"#666666\";\n        break;\n      default:\n        startColor = this.bg;\n        break;\n    }\n    gradient.addColorStop(0, startColor);\n    gradient.addColorStop(1, endColor);\n    return gradient;\n  }\n  initializeCanvas() {\n    if (!this.context)\n      return;\n    this.context.font = \"bold \" + 9 * this.PR + \"px Helvetica,Arial,sans-serif\";\n    this.context.textBaseline = \"top\";\n    this.gradient = this.createGradient();\n    this.context.fillStyle = this.bg;\n    this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n    this.context.fillStyle = this.fg;\n    this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n    this.context.fillStyle = this.fg;\n    this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 0.9;\n    this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n  }\n  update(value, valueGraph, maxValue, maxGraph, decimals = 0) {\n    if (!this.context || !this.gradient)\n      return;\n    const min = Math.min(Infinity, value);\n    const max = Math.max(maxValue, value);\n    maxGraph = Math.max(maxGraph, valueGraph);\n    this.context.globalAlpha = 1;\n    this.context.fillStyle = this.bg;\n    this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n    this.context.fillStyle = this.fg;\n    this.context.fillText(\n      `${value.toFixed(decimals)} ${this.name} (${min.toFixed(decimals)}-${parseFloat(\n        max.toFixed(decimals)\n      )})`,\n      this.TEXT_X,\n      this.TEXT_Y\n    );\n    this.context.drawImage(\n      this.canvas,\n      this.GRAPH_X + this.PR,\n      this.GRAPH_Y,\n      this.GRAPH_WIDTH - this.PR,\n      this.GRAPH_HEIGHT,\n      this.GRAPH_X,\n      this.GRAPH_Y,\n      this.GRAPH_WIDTH - this.PR,\n      this.GRAPH_HEIGHT\n    );\n    const columnHeight = this.GRAPH_HEIGHT - (1 - valueGraph / maxGraph) * this.GRAPH_HEIGHT;\n    if (columnHeight > 0) {\n      this.context.globalAlpha = 1;\n      this.context.fillStyle = this.gradient;\n      this.context.fillRect(\n        this.GRAPH_X + this.GRAPH_WIDTH - this.PR,\n        this.GRAPH_Y + this.GRAPH_HEIGHT - columnHeight,\n        this.PR,\n        columnHeight\n      );\n    }\n  }\n}\nexports.Panel = Panel;\n//# sourceMappingURL=panel.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHMtZ2wvZGlzdC9wYW5lbC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixxREFBcUQsaUJBQWlCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5QkFBeUIsRUFBRSxXQUFXLEdBQUcsc0JBQXNCLEdBQUc7QUFDM0U7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhY2Vwb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvc3RhdHMtZ2wvZGlzdC9wYW5lbC5janM/ZTJlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSk7XG5jbGFzcyBQYW5lbCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGZnLCBiZykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5mZyA9IGZnO1xuICAgIHRoaXMuYmcgPSBiZztcbiAgICB0aGlzLmdyYWRpZW50ID0gbnVsbDtcbiAgICB0aGlzLlBSID0gTWF0aC5yb3VuZCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKTtcbiAgICB0aGlzLldJRFRIID0gOTAgKiB0aGlzLlBSO1xuICAgIHRoaXMuSEVJR0hUID0gNDggKiB0aGlzLlBSO1xuICAgIHRoaXMuVEVYVF9YID0gMyAqIHRoaXMuUFI7XG4gICAgdGhpcy5URVhUX1kgPSAyICogdGhpcy5QUjtcbiAgICB0aGlzLkdSQVBIX1ggPSAzICogdGhpcy5QUjtcbiAgICB0aGlzLkdSQVBIX1kgPSAxNSAqIHRoaXMuUFI7XG4gICAgdGhpcy5HUkFQSF9XSURUSCA9IDg0ICogdGhpcy5QUjtcbiAgICB0aGlzLkdSQVBIX0hFSUdIVCA9IDMwICogdGhpcy5QUjtcbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLldJRFRIO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuSEVJR0hUO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLndpZHRoID0gXCI5MHB4XCI7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gXCI0OHB4XCI7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUuY3NzVGV4dCA9IFwid2lkdGg6OTBweDtoZWlnaHQ6NDhweFwiO1xuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICB0aGlzLmluaXRpYWxpemVDYW52YXMoKTtcbiAgfVxuICBjcmVhdGVHcmFkaWVudCgpIHtcbiAgICBpZiAoIXRoaXMuY29udGV4dClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNvbnRleHRcIik7XG4gICAgY29uc3QgZ3JhZGllbnQgPSB0aGlzLmNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoXG4gICAgICAwLFxuICAgICAgdGhpcy5HUkFQSF9ZLFxuICAgICAgMCxcbiAgICAgIHRoaXMuR1JBUEhfWSArIHRoaXMuR1JBUEhfSEVJR0hUXG4gICAgKTtcbiAgICBsZXQgc3RhcnRDb2xvcjtcbiAgICBjb25zdCBlbmRDb2xvciA9IHRoaXMuZmc7XG4gICAgc3dpdGNoICh0aGlzLmZnLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgXCIjMGZmXCI6XG4gICAgICAgIHN0YXJ0Q29sb3IgPSBcIiMwMDY2NjZcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiIzBmMFwiOlxuICAgICAgICBzdGFydENvbG9yID0gXCIjMDA2NjAwXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIiNmZjBcIjpcbiAgICAgICAgc3RhcnRDb2xvciA9IFwiIzY2NjYwMFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCIjZTFlMWUxXCI6XG4gICAgICAgIHN0YXJ0Q29sb3IgPSBcIiM2NjY2NjZcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdGFydENvbG9yID0gdGhpcy5iZztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCBzdGFydENvbG9yKTtcbiAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMSwgZW5kQ29sb3IpO1xuICAgIHJldHVybiBncmFkaWVudDtcbiAgfVxuICBpbml0aWFsaXplQ2FudmFzKCkge1xuICAgIGlmICghdGhpcy5jb250ZXh0KVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuY29udGV4dC5mb250ID0gXCJib2xkIFwiICsgOSAqIHRoaXMuUFIgKyBcInB4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmXCI7XG4gICAgdGhpcy5jb250ZXh0LnRleHRCYXNlbGluZSA9IFwidG9wXCI7XG4gICAgdGhpcy5ncmFkaWVudCA9IHRoaXMuY3JlYXRlR3JhZGllbnQoKTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5iZztcbiAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5XSURUSCwgdGhpcy5IRUlHSFQpO1xuICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmZnO1xuICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0aGlzLm5hbWUsIHRoaXMuVEVYVF9YLCB0aGlzLlRFWFRfWSk7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuZmc7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KHRoaXMuR1JBUEhfWCwgdGhpcy5HUkFQSF9ZLCB0aGlzLkdSQVBIX1dJRFRILCB0aGlzLkdSQVBIX0hFSUdIVCk7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYmc7XG4gICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gMC45O1xuICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCh0aGlzLkdSQVBIX1gsIHRoaXMuR1JBUEhfWSwgdGhpcy5HUkFQSF9XSURUSCwgdGhpcy5HUkFQSF9IRUlHSFQpO1xuICB9XG4gIHVwZGF0ZSh2YWx1ZSwgdmFsdWVHcmFwaCwgbWF4VmFsdWUsIG1heEdyYXBoLCBkZWNpbWFscyA9IDApIHtcbiAgICBpZiAoIXRoaXMuY29udGV4dCB8fCAhdGhpcy5ncmFkaWVudClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihJbmZpbml0eSwgdmFsdWUpO1xuICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KG1heFZhbHVlLCB2YWx1ZSk7XG4gICAgbWF4R3JhcGggPSBNYXRoLm1heChtYXhHcmFwaCwgdmFsdWVHcmFwaCk7XG4gICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gMTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5iZztcbiAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5XSURUSCwgdGhpcy5HUkFQSF9ZKTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5mZztcbiAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoXG4gICAgICBgJHt2YWx1ZS50b0ZpeGVkKGRlY2ltYWxzKX0gJHt0aGlzLm5hbWV9ICgke21pbi50b0ZpeGVkKGRlY2ltYWxzKX0tJHtwYXJzZUZsb2F0KFxuICAgICAgICBtYXgudG9GaXhlZChkZWNpbWFscylcbiAgICAgICl9KWAsXG4gICAgICB0aGlzLlRFWFRfWCxcbiAgICAgIHRoaXMuVEVYVF9ZXG4gICAgKTtcbiAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKFxuICAgICAgdGhpcy5jYW52YXMsXG4gICAgICB0aGlzLkdSQVBIX1ggKyB0aGlzLlBSLFxuICAgICAgdGhpcy5HUkFQSF9ZLFxuICAgICAgdGhpcy5HUkFQSF9XSURUSCAtIHRoaXMuUFIsXG4gICAgICB0aGlzLkdSQVBIX0hFSUdIVCxcbiAgICAgIHRoaXMuR1JBUEhfWCxcbiAgICAgIHRoaXMuR1JBUEhfWSxcbiAgICAgIHRoaXMuR1JBUEhfV0lEVEggLSB0aGlzLlBSLFxuICAgICAgdGhpcy5HUkFQSF9IRUlHSFRcbiAgICApO1xuICAgIGNvbnN0IGNvbHVtbkhlaWdodCA9IHRoaXMuR1JBUEhfSEVJR0hUIC0gKDEgLSB2YWx1ZUdyYXBoIC8gbWF4R3JhcGgpICogdGhpcy5HUkFQSF9IRUlHSFQ7XG4gICAgaWYgKGNvbHVtbkhlaWdodCA+IDApIHtcbiAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5ncmFkaWVudDtcbiAgICAgIHRoaXMuY29udGV4dC5maWxsUmVjdChcbiAgICAgICAgdGhpcy5HUkFQSF9YICsgdGhpcy5HUkFQSF9XSURUSCAtIHRoaXMuUFIsXG4gICAgICAgIHRoaXMuR1JBUEhfWSArIHRoaXMuR1JBUEhfSEVJR0hUIC0gY29sdW1uSGVpZ2h0LFxuICAgICAgICB0aGlzLlBSLFxuICAgICAgICBjb2x1bW5IZWlnaHRcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5leHBvcnRzLlBhbmVsID0gUGFuZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYW5lbC5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stats-gl/dist/panel.cjs\n");

/***/ })

};
;